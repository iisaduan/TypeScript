//// [tests/cases/compiler/mappedTypeRecursiveInference2.ts] ////

=== mappedTypeRecursiveInference2.ts ===
type MorphTuple = [string, "|>", any]
>MorphTuple : MorphTuple
>           : ^^^^^^^^^^

type validateMorph<def extends MorphTuple> = def[1] extends "|>"
>validateMorph : validateMorph<def>
>              : ^^^^^^^^^^^^^^^^^^

    ? [validateDefinition<def[0]>, "|>", (In: def[0]) => unknown]
>In : def[0]
>   : ^^^^^^

    : def

type validateDefinition<def> = def extends MorphTuple
>validateDefinition : validateDefinition<def>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^

    ? validateMorph<def>
    : {
          [k in keyof def]: validateDefinition<def[k]>
      }

declare function type<def>(def: validateDefinition<def>): def
>type : <def extends {} | null | undefined>(def: validateDefinition<def>) => def
>     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^                       ^^^^^   
>def : validateDefinition<def>
>    : ^^^^^^^^^^^^^^^^^^^^^^^

const shallow = type(["ark", "|>", (x) => x.length])
>shallow : [string, "|>", (x: string) => number]
>        : ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>type(["ark", "|>", (x) => x.length]) : [string, "|>", (x: string) => number]
>                                     : ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>type : <def extends {} | null | undefined>(def: validateDefinition<def>) => def
>     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^                       ^^^^^   
>["ark", "|>", (x) => x.length] : [string, "|>", (x: string) => number]
>                               : ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>"ark" : "ark"
>      : ^^^^^
>"|>" : "|>"
>     : ^^^^
>(x) => x.length : (x: string) => number
>                : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>x.length : number
>         : ^^^^^^
>x : string
>  : ^^^^^^
>length : number
>       : ^^^^^^

const objectLiteral = type({ a: ["ark", "|>", (x) => x.length] })
>objectLiteral : { a: (string | ((x: any) => any))[]; }
>              : ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>type({ a: ["ark", "|>", (x) => x.length] }) : { a: (string | ((x: any) => any))[]; }
>                                            : ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>type : <def extends {} | null | undefined>(def: validateDefinition<def>) => def
>     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^                       ^^^^^   
>{ a: ["ark", "|>", (x) => x.length] } : { a: (string | ((x: any) => any))[]; }
>                                      : ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>a : (string | ((x: any) => any))[]
>  : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^
>["ark", "|>", (x) => x.length] : (string | ((x: any) => any))[]
>                               : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^
>"ark" : "ark"
>      : ^^^^^
>"|>" : "|>"
>     : ^^^^
>(x) => x.length : (x: any) => any
>                : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x.length : any
>         : ^^^
>x : any
>  : ^^^
>length : any
>       : ^^^

const nestedTuple = type([["ark", "|>", (x) => x.length]])
>nestedTuple : [(string | ((x: any) => any))[]]
>            : ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>type([["ark", "|>", (x) => x.length]]) : [(string | ((x: any) => any))[]]
>                                       : ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>type : <def extends {} | null | undefined>(def: validateDefinition<def>) => def
>     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^                       ^^^^^   
>[["ark", "|>", (x) => x.length]] : [(string | ((x: any) => any))[]]
>                                 : ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>["ark", "|>", (x) => x.length] : (string | ((x: any) => any))[]
>                               : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^
>"ark" : "ark"
>      : ^^^^^
>"|>" : "|>"
>     : ^^^^
>(x) => x.length : (x: any) => any
>                : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x.length : any
>         : ^^^
>x : any
>  : ^^^
>length : any
>       : ^^^

