//// [tests/cases/compiler/circularReferenceInReturnType.ts] ////

=== circularReferenceInReturnType.ts ===
// inference fails for res1 and res2, but ideally should not
declare function fn1<T>(cb: () => T): string;
>fn1 : <T extends {} | null | undefined>(cb: () => T) => string
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^       ^^^^^      
>cb : () => T
>   : ^^^^^^ 

const res1 = fn1(() => res1);
>res1 : any
>     : ^^^
>fn1(() => res1) : string
>                : ^^^^^^
>fn1 : <T extends {} | null | undefined>(cb: () => T) => string
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^       ^^^^^      
>() => res1 : () => any
>           : ^^^^^^^^^
>res1 : any
>     : ^^^

declare function fn2<T>(): (cb: () => any) => (a: T) => void;
>fn2 : <T extends {} | null | undefined>() => (cb: () => any) => (a: T) => void
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                 
>cb : () => any
>   : ^^^^^^   
>a : T
>  : ^

const res2 = fn2()(() => res2);
>res2 : (a: {} | null | undefined) => void
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn2()(() => res2) : (a: {} | null | undefined) => void
>                  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn2() : (cb: () => any) => (a: {} | null | undefined) => void
>      : ^  ^^         ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn2 : <T extends {} | null | undefined>() => (cb: () => any) => (a: T) => void
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                 
>() => res2 : () => (a: {} | null | undefined) => void
>           : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>res2 : (a: {} | null | undefined) => void
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    

declare function fn3<T>(): <T2>(cb: (arg: T2) => any) => (a: T) => void;
>fn3 : <T extends {} | null | undefined>() => <T2>(cb: (arg: T2) => any) => (a: T) => void
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                            
>cb : (arg: T2) => any
>   : ^   ^^  ^^^^^   
>arg : T2
>    : ^^
>a : T
>  : ^

const res3 = fn3()(() => res3);
>res3 : (a: {} | null | undefined) => void
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn3()(() => res3) : (a: {} | null | undefined) => void
>                  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn3() : <T2 extends {} | null | undefined>(cb: (arg: T2) => any) => (a: {} | null | undefined) => void
>      : ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^   ^^^^^^^^^   ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>fn3 : <T extends {} | null | undefined>() => <T2>(cb: (arg: T2) => any) => (a: T) => void
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                            
>() => res3 : () => (a: {} | null | undefined) => void
>           : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>res3 : (a: {} | null | undefined) => void
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    

// https://github.com/microsoft/TypeScript/issues/58616

function foo(arg: Parameters<typeof bar>[0]) {
>foo : (arg: Parameters<typeof bar>[0]) => string
>    : ^   ^^                         ^^^^^^^^^^^
>arg : string
>    : ^^^^^^
>bar : (arg: string) => string
>    : ^   ^^      ^^^^^^^^^^^

    return arg;
>arg : string
>    : ^^^^^^
}

function bar(arg: string) {
>bar : (arg: string) => string
>    : ^   ^^      ^^^^^^^^^^^
>arg : string
>    : ^^^^^^

    return foo(arg);
>foo(arg) : string
>         : ^^^^^^
>foo : (arg: Parameters<typeof bar>[0]) => string
>    : ^   ^^                         ^^^^^^^^^^^
>arg : string
>    : ^^^^^^
}

