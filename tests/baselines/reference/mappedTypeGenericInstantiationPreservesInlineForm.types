//// [tests/cases/compiler/mappedTypeGenericInstantiationPreservesInlineForm.ts] ////

=== mappedTypeGenericInstantiationPreservesInlineForm.ts ===
// repro from #53109

export const test1 = <T = Record<string, never>>(schema: {
>test1 : <T extends unknown = Record<string, never>>(schema: { [K in keyof Required<T>]: T[K]; }) => void
>      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^                                   ^^^^^^^^^
><T = Record<string, never>>(schema: {    [K in keyof Required<T>]: T[K];}) => {} : <T extends unknown = Record<string, never>>(schema: { [K in keyof Required<T>]: T[K]; }) => void
>                                                                                 : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^                                   ^^^^^^^^^
>schema : { [K in keyof Required<T>]: T[K]; }
>       : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    [K in keyof Required<T>]: T[K];
}) => {}

export function test2<T = Record<string, never>>(schema: {
>test2 : <T extends unknown = Record<string, never>>(schema: { [K in keyof Required<T>]: T[K]; }) => void
>      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^                                   ^^^^^^^^^
>schema : { [K in keyof Required<T>]: T[K]; }
>       : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    [K in keyof Required<T>]: T[K];
}) {};

