//// [tests/cases/conformance/types/intersection/intersectionTypeInference3.ts] ////

=== intersectionTypeInference3.ts ===
// Repro from #19682

type Nominal<Kind extends string, Type> = Type & {
>Nominal : Nominal<Kind, Type>
>        : ^^^^^^^^^^^^^^^^^^^

    [Symbol.species]: Kind;
>[Symbol.species] : Kind
>                 : ^^^^
>Symbol.species : unique symbol
>               : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>species : unique symbol
>        : ^^^^^^^^^^^^^

};

type A = Nominal<'A', string>;
>A : A
>  : ^

declare const a: Set<A>;
>a : Set<A>
>  : ^^^^^^

declare const b: Set<A>;
>b : Set<A>
>  : ^^^^^^

const c1 = Array.from(a).concat(Array.from(b));
>c1 : A[]
>   : ^^^
>Array.from(a).concat(Array.from(b)) : A[]
>                                    : ^^^
>Array.from(a).concat : { (...items: ConcatArray<A>[]): A[]; (...items: (A | ConcatArray<A>)[]): A[]; }
>                     : ^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Array.from(a) : A[]
>              : ^^^
>Array.from : { <T extends {} | null | undefined>(arrayLike: ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>           : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
>from : { <T extends {} | null | undefined>(arrayLike: ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>     : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>a : Set<A>
>  : ^^^^^^
>concat : { (...items: ConcatArray<A>[]): A[]; (...items: (A | ConcatArray<A>)[]): A[]; }
>       : ^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Array.from(b) : A[]
>              : ^^^
>Array.from : { <T extends {} | null | undefined>(arrayLike: ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>           : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
>from : { <T extends {} | null | undefined>(arrayLike: ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T extends {} | null | undefined, U extends {} | null | undefined>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>     : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^^   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>b : Set<A>
>  : ^^^^^^

// Simpler repro

declare function from<T>(): T[];
>from : <T extends {} | null | undefined>() => T[]
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   

const c2: ReadonlyArray<A> = from();
>c2 : readonly A[]
>   : ^^^^^^^^^^^^
>from() : A[]
>       : ^^^
>from : <T extends {} | null | undefined>() => T[]
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   

