genericUnboundedTypeParamAssignability.ts(2,5): error TS2339: Property 'toString' does not exist on type 'T'.
genericUnboundedTypeParamAssignability.ts(15,6): error TS2345: Argument of type 'T' is not assignable to parameter of type '{}'.
genericUnboundedTypeParamAssignability.ts(16,6): error TS2345: Argument of type 'T' is not assignable to parameter of type 'Record<string, any>'.
genericUnboundedTypeParamAssignability.ts(17,5): error TS2339: Property 'toString' does not exist on type 'T'.


==== genericUnboundedTypeParamAssignability.ts (4 errors) ====
    function f1<T>(o: T) {
      o.toString(); // error
        ~~~~~~~~
!!! error TS2339: Property 'toString' does not exist on type 'T'.
    }
    
    function f2<T extends {}>(o: T) {
      o.toString(); // no error
    }
    
    function f3<T extends Record<string, any>>(o: T) {
      o.toString(); // no error
    }
    
    function user<T>(t: T) {
      f1(t);
      f2(t); // error in strict, unbounded T doesn't satisfy the constraint
         ~
!!! error TS2345: Argument of type 'T' is not assignable to parameter of type '{}'.
      f3(t); // error in strict, unbounded T doesn't satisfy the constraint
         ~
!!! error TS2345: Argument of type 'T' is not assignable to parameter of type 'Record<string, any>'.
      t.toString();  // error, for the same reason as f1()
        ~~~~~~~~
!!! error TS2339: Property 'toString' does not exist on type 'T'.
    }
    