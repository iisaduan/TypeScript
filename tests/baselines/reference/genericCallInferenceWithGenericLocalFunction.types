//// [tests/cases/compiler/genericCallInferenceWithGenericLocalFunction.ts] ////

=== genericCallInferenceWithGenericLocalFunction.ts ===
// https://github.com/microsoft/TypeScript/issues/43961

const createTransform = <I, O>(tr: (from: I) => O) => tr;
>createTransform : <I extends {} | null | undefined, O extends {} | null | undefined>(tr: (from: I) => O) => (from: I) => O
>                : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^              ^^^^^^    ^^ ^^^^^ 
><I, O>(tr: (from: I) => O) => tr : <I extends {} | null | undefined, O extends {} | null | undefined>(tr: (from: I) => O) => (from: I) => O
>                                 : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^              ^^^^^^    ^^ ^^^^^ 
>tr : (from: I) => O
>   : ^    ^^ ^^^^^ 
>from : I
>     : ^
>tr : (from: I) => O
>   : ^    ^^ ^^^^^ 

function withP2<P>(p: P) {
>withP2 : <P extends {} | null | undefined>(p: P) => <I extends {} | null | undefined>(from: I) => I & P
>       : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^ ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^
>p : P
>  : ^

  const m = <I,>(from: I) => ({ ...from, ...p });
>m : <I extends {} | null | undefined>(from: I) => I & P
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^ ^^^^^^^^^^
><I,>(from: I) => ({ ...from, ...p }) : <I extends {} | null | undefined>(from: I) => I & P
>                                     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^ ^^^^^^^^^^
>from : I
>     : ^
>({ ...from, ...p }) : I & P
>                    : ^^^^^
>{ ...from, ...p } : I & P
>                  : ^^^^^
>from : I
>     : ^
>p : P
>  : ^

  return createTransform(m);
>createTransform(m) : <I extends {} | null | undefined>(from: I) => I & P
>                   : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^
>createTransform : <I extends {} | null | undefined, O extends {} | null | undefined>(tr: (from: I) => O) => (from: I) => O
>                : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^              ^^^^^^    ^^ ^^^^^ 
>m : <I extends {} | null | undefined>(from: I) => I & P
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^ ^^^^^^^^^^
}

const addP2 = withP2({ foo: 1 });
>addP2 : <I extends {} | null | undefined>(from: I) => I & { foo: number; }
>      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP2({ foo: 1 }) : <I extends {} | null | undefined>(from: I) => I & { foo: number; }
>                   : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP2 : <P extends {} | null | undefined>(p: P) => <I extends {} | null | undefined>(from: I) => I & P
>       : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^ ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^
>{ foo: 1 } : { foo: number; }
>           : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>1 : 1
>  : ^

const added2 = addP2({ bar: 2 });
>added2 : { bar: number; } & { foo: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP2({ bar: 2 }) : { bar: number; } & { foo: number; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP2 : <I extends {} | null | undefined>(from: I) => I & { foo: number; }
>      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ bar: 2 } : { bar: number; }
>           : ^^^^^^^^^^^^^^^^
>bar : number
>    : ^^^^^^
>2 : 2
>  : ^

