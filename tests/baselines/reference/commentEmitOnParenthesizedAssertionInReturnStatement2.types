//// [tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement2.ts] ////

=== commentEmitOnParenthesizedAssertionInReturnStatement2.ts ===
export class Foo {
>Foo : Foo
>    : ^^^

    client = {
>client : { getThing: () => Promise<"">; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{      getThing: () => Promise.resolve('')    } : { getThing: () => Promise<"">; }
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      getThing: () => Promise.resolve('')
>getThing : () => Promise<"">
>         : ^^^^^^^^^^^^^^^^^
>() => Promise.resolve('') : () => Promise<"">
>                          : ^^^^^^^^^^^^^^^^^
>Promise.resolve('') : Promise<"">
>                    : ^^^^^^^^^^^
>Promise.resolve : { (): Promise<void>; <T extends {} | null | undefined>(value: T): Promise<Awaited<T>>; <T extends {} | null | undefined>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>                : ^^^^^^             ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^ ^^^                   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^                  ^^^                   ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>resolve : { (): Promise<void>; <T extends {} | null | undefined>(value: T): Promise<Awaited<T>>; <T extends {} | null | undefined>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>        : ^^^^^^             ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^ ^^^                   ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^                  ^^^                   ^^^
>'' : ""
>   : ^^
    }
  
    foo() {
>foo : () => Promise<"">
>    : ^^^^^^^^^^^^^^^^^

      return (
>(        /* TODO: please refactor */ this.client          .getThing() satisfies Promise<string>) : Promise<"">
>                                                                                                 : ^^^^^^^^^^^

        /* TODO: please refactor */ this.client
>this.client          .getThing() satisfies Promise<string> : Promise<"">
>                                                           : ^^^^^^^^^^^
>this.client          .getThing() : Promise<"">
>                                 : ^^^^^^^^^^^
>this.client          .getThing : () => Promise<"">
>                               : ^^^^^^^^^^^^^^^^^
>this.client : { getThing: () => Promise<"">; }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>client : { getThing: () => Promise<"">; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

          .getThing() satisfies Promise<string>);
>getThing : () => Promise<"">
>         : ^^^^^^^^^^^^^^^^^
    }
  }
